package edu.orangecoastcollege.cs272.taskr.model;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

import java.util.ArrayList;

import edu.orangecoastcollege.cs272.taskr.controller.DatabaseController;

/**
 * The <code>Subtask</code> class represents a subtask of an assignment.
 *
 * @author  Derek Tran
 * @version 1.0
 * @since   2017-05-02
 */
public class Subtask extends Assignment
{

    private static final String SUBTASKS_TABLE_NAME = "subtasks";
    public static final String[] SUBTASKS_FIELD_NAMES = {"sub_id", "name", "description", "due_date"};
    public static final String[] SUBTASKS_FIELD_TYPES = {"INTEGER PRIMARY KEY AUTOINCREMENT", "TEXT", "TEXT", "TEXT"};

    /**
     * Creates a new <code>Subtask</code> object.
     * @param id The id of the subtask.
     * @param name The name of the subtask.
     * @param description The description of the subtask.
     * @param dueDate The due date of the subtask.
     */
    public Subtask(int id, String name, String description, String dueDate)
    {
        super(id, name, description, dueDate);
    }

    public static Subtask getById(DatabaseController db, int key){
        String[] queryById = { String.valueOf(key)};

        SQLiteDatabase database = db.database();
        Cursor c = database.query(SUBTASKS_TABLE_NAME, SUBTASKS_FIELD_NAMES, SUBTASKS_FIELD_NAMES[0]+"=?", queryById, null, null, null, null);

        if (c != null) {
            c.moveToFirst();
        }

        int id = c.getInt(c.getColumnIndex(SUBTASKS_FIELD_NAMES[0]));
        String name = c.getString(c.getColumnIndex(SUBTASKS_FIELD_NAMES[1]));
        String description = c.getString(c.getColumnIndex(SUBTASKS_FIELD_NAMES[2]));
        String dueDate = c.getString(c.getColumnIndex(SUBTASKS_FIELD_NAMES[3]));

        c.close();
        return new Subtask(id, name, description, dueDate);
    }

    public static ArrayList<Subtask> getAllSubtasks(DatabaseController db) {
        ArrayList<Subtask> subtasksList = new ArrayList<>();
        db.openDatabase();
        SQLiteDatabase database = db.database();
        Cursor c = database.query(SUBTASKS_TABLE_NAME, SUBTASKS_FIELD_NAMES, null, null, null, null, null, null);


        if (c.moveToFirst()) {
            do {
                int id = c.getInt(c.getColumnIndex(SUBTASKS_FIELD_NAMES[0]));
                String name = c.getString(c.getColumnIndex(SUBTASKS_FIELD_NAMES[1]));
                String description = c.getString(c.getColumnIndex(SUBTASKS_FIELD_NAMES[2]));
                String dueDate = c.getString(c.getColumnIndex(SUBTASKS_FIELD_NAMES[3]));
                subtasksList.add(new Subtask(id, name, description, dueDate));
            } while (c.moveToNext());
        }
        c.close();
        return subtasksList;
    }

    public void save(DatabaseController db)
    {
        ContentValues values = new ContentValues();
        values.put(SUBTASKS_FIELD_NAMES[1], getName());
        values.put(SUBTASKS_FIELD_NAMES[2], getDescription());
        values.put(SUBTASKS_FIELD_NAMES[3], getDueDate());

        SQLiteDatabase database = db.database();
        database.insert(SUBTASKS_TABLE_NAME, null, values);

        // Retrieve autogenerated primary key
        String selectLastSQL = "SELECT MAX(" + SUBTASKS_FIELD_NAMES[0] + ") FROM " + SUBTASKS_TABLE_NAME;
        Cursor c = database.rawQuery(selectLastSQL, null);
        if (c != null) c.moveToFirst();
        this.mID = c.getInt(0);
        c.close();
    }


    public static class Model extends DatabaseController.LocalDatabaseModel {

        public Model(){
        }

        @Override
        public void onUpgrade(SQLiteDatabase database, int oldVersion, int newVersion){
            database.execSQL("DROP TABLE IF EXISTS templates");
            onCreate(database);
        }
        @Override
        public void onCreate(SQLiteDatabase database){
            String createQuery = "CREATE TABLE " + SUBTASKS_TABLE_NAME + "("
                    + SUBTASKS_FIELD_NAMES[0] + SUBTASKS_FIELD_TYPES[0]
                    + SUBTASKS_FIELD_NAMES[1] + SUBTASKS_FIELD_TYPES[1]
                    + SUBTASKS_FIELD_NAMES[2] + SUBTASKS_FIELD_TYPES[2]
                    + SUBTASKS_FIELD_NAMES[3] + SUBTASKS_FIELD_TYPES[3] + ")";

            database.execSQL(createQuery);
        }
    }


}
