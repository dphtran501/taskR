package edu.orangecoastcollege.cs272.taskr.model.manager;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;


import java.util.ArrayList;

import edu.orangecoastcollege.cs272.taskr.controller.DatabaseController;



/**
 * Created by vietn on 5/17/2017.
 */

public class SubtaskModel extends DatabaseController.LocalDatabaseModel
{


    private static final String SUBTASKS_TABLE_NAME = "subtasks";
    private static final String[] SUBTASKS_FIELD_NAMES = {"sub_id", "name", "description", "due_date"};
    private static final String[] SUBTASKS_FIELD_TYPES = {" INTEGER PRIMARY KEY AUTOINCREMENT, ", " TEXT, ", " TEXT, ", " TEXT"};

    public SubtaskModel(){}

    @Override
    public void onUpgrade(SQLiteDatabase database, int oldVersion, int newVersion)
    {
        database.execSQL("DROP TABLE IF EXISTS " + SUBTASKS_TABLE_NAME);
        onCreate(database);
    }
    @Override
    public void onCreate(SQLiteDatabase database)
    {
        String createQuery = "CREATE TABLE IF NOT EXISTS " + SUBTASKS_TABLE_NAME + "("
                + SUBTASKS_FIELD_NAMES[0] + SUBTASKS_FIELD_TYPES[0]
                + SUBTASKS_FIELD_NAMES[1] + SUBTASKS_FIELD_TYPES[1]
                + SUBTASKS_FIELD_NAMES[2] + SUBTASKS_FIELD_TYPES[2]
                + SUBTASKS_FIELD_NAMES[3] + SUBTASKS_FIELD_TYPES[3] + ")";

        database.execSQL(createQuery);
    }


    public static Subtask getById(DatabaseController db, int key)
    {
        String[] queryById = { String.valueOf(key)};

        SQLiteDatabase database = db.database();
        Cursor c = database.query(SUBTASKS_TABLE_NAME, SUBTASKS_FIELD_NAMES, SUBTASKS_FIELD_NAMES[0]+"=?", queryById, null, null, null, null);

        if (c != null)
            c.moveToFirst();

        int id = c.getInt(c.getColumnIndex(SUBTASKS_FIELD_NAMES[0]));
        String name = c.getString(c.getColumnIndex(SUBTASKS_FIELD_NAMES[1]));
        String description = c.getString(c.getColumnIndex(SUBTASKS_FIELD_NAMES[2]));
        String dueDate = c.getString(c.getColumnIndex(SUBTASKS_FIELD_NAMES[3]));

        c.close();
        return new Subtask(id, name, description, dueDate);
    }

    public static ArrayList<Subtask> getAllSubtasks(DatabaseController db)
    {
        ArrayList<Subtask> subtasksList = new ArrayList<>();
        SQLiteDatabase database = db.database();
        Cursor c = database.query(SUBTASKS_TABLE_NAME, SUBTASKS_FIELD_NAMES, null, null, null, null, null, null);


        if (c.moveToFirst()) {
            do {
                int id = c.getInt(c.getColumnIndex(SUBTASKS_FIELD_NAMES[0]));
                String name = c.getString(c.getColumnIndex(SUBTASKS_FIELD_NAMES[1]));
                String description = c.getString(c.getColumnIndex(SUBTASKS_FIELD_NAMES[2]));
                String dueDate = c.getString(c.getColumnIndex(SUBTASKS_FIELD_NAMES[3]));
                subtasksList.add(new Subtask(id, name, description, dueDate));
            } while (c.moveToNext());
        }
        c.close();
        return subtasksList;
    }

    public static int save(DatabaseController dbc, Subtask subtask)
    {
        ContentValues values = new ContentValues();
        values.put(SUBTASKS_FIELD_NAMES[1], subtask.getName());
        values.put(SUBTASKS_FIELD_NAMES[2], subtask.getDescription());
        values.put(SUBTASKS_FIELD_NAMES[3], subtask.getDueDate());

        SQLiteDatabase db = dbc.database();
        db.insert(SUBTASKS_TABLE_NAME, null, values);

        // Retrieve autogenerated primary key
        String selectLastSQL = "SELECT MAX(" + SUBTASKS_FIELD_NAMES[0] + ") FROM " + SUBTASKS_TABLE_NAME;
        Cursor c = db.rawQuery(selectLastSQL, null);
        if (c != null) c.moveToFirst();
        int key = c.getInt(0);
        c.close();

        return key;
    }

    public static void updateSubtask(DatabaseController dbc, Subtask s)
    {
        ContentValues values = new ContentValues();

        values.put(SUBTASKS_FIELD_NAMES[1], s.getName());
        values.put(SUBTASKS_FIELD_NAMES[2], s.getDescription());
        values.put(SUBTASKS_FIELD_NAMES[3], s.getDueDate());

        SQLiteDatabase db = dbc.database();
        db.update(SUBTASKS_TABLE_NAME, values, SUBTASKS_FIELD_NAMES[0] + "=?",
                new String[]{String.valueOf(s.getID())});
    }

    public static void deleteAllSubtasks(DatabaseController dbc)
    {
        SQLiteDatabase db = dbc.database();
        db.delete(SUBTASKS_TABLE_NAME, null, null);
    }

    public static void deleteSubtask(DatabaseController dbc, Subtask s)
    {
        SQLiteDatabase db = dbc.database();

        db.delete(SUBTASKS_TABLE_NAME, SUBTASKS_FIELD_NAMES[0] + "=?",
                new String[] {String.valueOf(s.getID())});
    }
}
